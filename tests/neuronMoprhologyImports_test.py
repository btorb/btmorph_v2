from btmorph2.btstructs import NeuronMorphology
import os


def dummyImport():

    swcFile = "tests/117.v3dpbd/16_117.v3dpbd_EnsembleNeuronTracerV2n.swc"
    NeuronMorphology(swcFile)

def allSWCImport_test():

    """
    Testing import of SWC files generated by several BigNeuron algorithms
    """

    swcFiles = []

    for dirPath, dirNames, fileNames in os.walk("tests"):

        swcFiles += [os.path.join(dirPath, fileName)
                     for fileName in fileNames if fileName.endswith(".swc")]

    for swcFile in swcFiles:

        print("Testing the import of {}".format(swcFile))
        try:
            NeuronMorphology(swcFile)

        except Exception as e:
            if swcFile in [
                'tests/117.v3dpbd/10_117.v3dpbd_ENT_updated.swc',
                "tests/117.v3dpbd/05_117.v3dpbd_Advantra.swc",
                "tests/117.v3dpbd/15_117.v3dpbd_app2new2.swc",
                "tests/117.v3dpbd/01_117.v3dpbd_axis_analyzer.swc",
                "tests/117.v3dpbd/18_117.v3dpbd_x1439_y1439_z474_app2.swc",
                "tests/117.v3dpbd/13_117.v3dpbd_app2new1.swc",
                "tests/117.v3dpbd/12_117.v3dpbd_Advantra_updated.swc",
                "tests/117.v3dpbd/19_117.v3dpbd_NeuroGPSTree_updated.swc",
                "tests/117.v3dpbd/21_117.v3dpbd_tubularity_model_S.v3draw_MST_Tracing_Ws_21_th_200.swc",
                "tests/117.v3dpbd/14_117.v3dpbd_app2new3.swc",
                "tests/117.v3dpbd/20_117.v3dpbd_tubularity_model_S.v3draw_MST_Tracing_Ws_21_th_170_updated.swc",
                "tests/117.v3dpbd/11_117.v3dpbd_NeuronChaser_updated.swc",
                "tests/117.v3dpbd/22_117.v3dpbd_Rayshooting.swc",
            ]:
                print(e)
                assert type(e) is NotImplementedError and \
                       e.message == "No Soma Found for {}".format(swcFile)
            elif swcFile in [
                "tests/117.v3dpbd/03_117.v3dpbd_NeuroGPSTree.swc",
                "tests/117.v3dpbd/08_117.v3dpbd_neutube_updated.swc",
                "tests/117.v3dpbd/04_117.v3dpbd_axis_analyzer_updated.swc",
                "tests/117.v3dpbd/06_117.v3dpbd_MOST.swc",
                "tests/117.v3dpbd/09_117.v3dpbd_neutu_autotrace.swc",
                "tests/117.v3dpbd/07_117.v3dpbd_neutube.swc",
                "tests/117.v3dpbd/02_117.v3dpbd_MST_Tracing.swc",
                ]:
                print(e)
                assert type(e) is ValueError and \
                       e.message == "Given SWC File {} has more than one trees".format(swcFile)

            elif swcFile in [
                "tests/117.v3dpbd/16_117.v3dpbd_EnsembleNeuronTracerV2n.swc",
                "tests/117.v3dpbd/17_117.v3dpbd_EnsembleNeuronTracerV2s.swc"
                ]:
                print(e)
                assert type(e) is AssertionError and  \
                       e.message == "File {} has cyclic connections!".format(swcFile)

            else:
                print(e)
                assert False

def correctIfSomaAbsentArgument_test():
    """
    Tests if setting argument correctifSomaAbsent to True has the
    expected effect on importing SWC file with NeuronMorphology
    :return:
    """
    swcFile = 'tests/117.v3dpbd/10_117.v3dpbd_ENT_updated.swc'

    NeuronMorphology(swcFile, correctIfSomaAbsent=True)




if __name__ == "__main__":
    # dummyImport()
    allSWCImport_test()